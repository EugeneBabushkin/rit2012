Inversion of control.
====================

Здравствуйте, меня зовут Сидоров Александр.

Хочу рассказать об инверсии контроля в php, прием позволяющий создавать масштабируемый, тестируемый код.

Слайд 1. Возьмем простую систему User и SessionStore (слайд 1).

Слайд 2. Наша задача реализовать хранилище данных для сущности User, в большинстве случаев используется паттерн Factory. Однако есть один минус, классы связаны, объект хранилища создается в User, что плохо влияет на возможность повторного использования или тестирования объекта User.

Слайд 3. Чтобы повысить качество кода, выносим инициацию объекта за пределы класса User. Здесь же появляется дополнительный плюс, мы можем использовать различные настройки для различных типов хранилищ. Здесь показана инъекция зависимости через конструктор.

Слайд 4. Аналогичная идея, только используем setter для установки зависимости.

Слайд 5. DI – это паттерн, позволяющтй передавать зависимости через конструктор, методы или непосредственно через свойства. Основная цель - ослабление зависимости одного компонента приложения от другого.

Слайд 6. В реальной ситуации всегда необходимо взаимодействие множества подсистем, для этого используется контейнер зависимостей, также он называется ServiceLocator, Dependency Injection Container.

Слайд 7. Вместо регистрации каждой зависимости, мы передаем в класс контейнер. 

Слайд 8. Все сервисы должны быть сконфигурированны перед использованием и хранятся в одном контенере. Однако создание экземпляров происходит когда это необъодимо.  Данный подход очень гибкок, и позволяет держать конфигурации сервисов в простой форме - ini, xml, yaml.

Слайд 9. Зачастую в классе User хранится информация о правах пользователей, авторизация и т.д. Поэтому полезно такой класс зарегистрировать как сервис и использовать, например, в контроллере MVC.

Данный паттерн широко используется в Symfony2. Всем спасибо.